<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何理解“面向对象”编程思想</title>
    <link href="undefined2019/10/16/second/"/>
    <url>2019/10/16/second/</url>
    
    <content type="html"><![CDATA[<p>理解面向对象，首先理解要它的基础概念：</p><p>面向对象 ( Object Oriented ) 是将现实问题构建关系，然后抽象成 <strong>类 ( class )</strong>，给类定义属性和方法后，再将类实例化成 <strong>实例 ( instance )</strong> ，通过访问实例的属性和调用方法来进行使用。</p><p>在不同的语言中，对象的定义范围不同。在 Python 中“类”和“类的实例”都称为 <strong>对象 ( Object )</strong>，因为 Python 的类是更顶级的 type 实例化后的对象，也就是常说的“Python 里万物皆对象”；而在 Java 等静态语言中，一般把类的实例称为对象。</p><p>理解了理论知识后，接着通过例子，再理解面向对象的三大特征：封装、继承、多态。</p><p>下边我们把“女娲造人”这个神话故事，用 Python 的面向对象代码来叙述一遍：</p><p>假设我们是女娲（程序设计者），我们突然有个想法，想造一群和自己差不多的小人，小人需要有男女两种性别，外观和行为也有一些差异。那首先我们分析出，不管什么性别，都应该有四肢，所以我们先仿照自己的构造，在脑海中构思泥人的样子（抽象成基类），然后先赋予泥人一些共有的行为（定义类的实例方法）：</p><pre><code>class Human(object):    def __init__(self, name):        # 有个名字，有两只手，两条腿        self._name = name        self.hands = 2        self.legs = 2    def introduce_self(self):        # 介绍自己        print(&#39;我是%s&#39; % self._name)    def work(self):        # 工作，但还没有定义具体的行为        raise NotImplementedError</code></pre><p>然后我们先捏3个泥人（<strong>实例化</strong>对象），并给他们取了不同的名字（初始化实例属性）：</p><pre><code>&gt;&gt;&gt; a = Human(&#39;大强子&#39;)&gt;&gt;&gt; b = Human(&#39;二狗子&#39;)&gt;&gt;&gt; c = Human(&#39;三愣子&#39;)</code></pre><p>我们让其中一个人介绍自己（调用实例方法）：</p><pre><code>&gt;&gt;&gt; a.introduce_self()我是大强子</code></pre><p>这里解释一下 <code>Human</code> 的代码，虽然设定了每个人都要工作，但如何工作需要到具体到不同类型的人，所以在基类里我们并没有定义 <code>work</code> 方法的内容，如果强行调用会抛出异常。</p><p>还有一点，上面定义属性时，我们把 <code>self._name</code> 前边加了下划线，是因为 Python 里用下划线来约定这是一个受保护变量（对应 Java 中的 <code>protected</code> ），我们不希望外界能直接访问 <code>name</code> 这个属性，必须要通过对象调用 <code>introduce_self()</code> 这个行为介绍了自己，别人才能知道他叫什么名字，这个过程就称之为<strong>封装</strong>。</p><p>然后我们继续完成想法，需要给泥人增加两种性别，并且异性之间能结婚，我们开始在刚才泥人模型的基础上（<strong>继承</strong>于基类），构思出两种性别的泥人的区别（设置不同的属性），然后让他们都可以工作，但工作的内容不一样（调用相同的方法出现不同结果，是<strong>多态</strong>性），并决定让男人可以娶女人（将这个行为定义为男人的方法）。</p><pre><code>import randomclass Female(Human):    def __init__(self, name):        # 调用父类的初始化方法，依然有名字、两只手、两条腿        super().__init__(name)        # 头发和力量进行随机取值        self.hair = random.randint(3, 5)        self.power = random.randint(1, 3)        # 是否已婚        self.married = False    def work():        print(&#39;%s采摘了一些果子&#39; % self.name)class Male(Human):    def __init__(self, name):        super().__init__(name)        self.hair = random.randint(0, 2)        self.power = random.randint(2, 5)        self.married = False    def work():        print(&#39;%s出去打猎了一天&#39; % self.name)    def marry(self, other):        # 判断自己或对方是否已结婚，否则抛出异常        if self.married is True or other.married is True:            raise ValueError(&#39;法律不支持多次结婚&#39;)        # 判断对方是否是女性，否则抛出异常        if isinstance(other, Female):            self.married = True            other.married = True        else:            raise TypeError(&#39;法律不支持同性结婚&#39;)</code></pre><p>然后我们就可以让小人活动起来：</p><pre><code>&gt;&gt;&gt; a = Male(&#39;大强子&#39;)&gt;&gt;&gt; b = Male(&#39;二狗子&#39;)&gt;&gt;&gt; c = Female(&#39;翠花&#39;)&gt;&gt;&gt; for h in [a, b, c]:...     # 调用父类的方法...     h.introduce_self()我是大强子我是二狗子我是翠花&gt;&gt;&gt; for h in [a, b, c]:...     # 多态性使相同的方法产生不同的结果...     h.work()大强子出去打猎了一天二狗子出去打猎了一天翠花采摘了一些果子&gt;&gt;&gt; a.marry(c)&gt;&gt;&gt; a.marriedTrue&gt;&gt;&gt; c.marriedTrue&gt;&gt;&gt; b.marry(c)ValueError: 法律不支持多次结婚&gt;&gt;&gt; b.marry(a)TypeError: 法律不支持同性结婚</code></pre><p>设计到此结束，我们来复盘一下整个过程。</p><p>我们先是把人的共有特征抽象成 <code>Human</code> 基类，这个基类并不用于实例化，而是用于让 <code>Female</code> 和 <code>Male</code> 继承它，并实现不同的行为。这样我们就避免把一些共有的行为重复在多个类里定义，如果我们后续想对人类的行为进行变动，也只需要修改 <code>Human</code>，继承 <code>Human</code> 的子类会自动获得新行为，这是 <strong>继承</strong>带来的好处。</p><p>我们把 <code>name</code> 设计为受保护变量，外界无法直接访问这个属性，让每个人的隐私得到了保障（一些不必要的行为变得可控），这是 <strong>封装</strong> 带来的好处。</p><p>同时我们在 <code>Human</code> 中预留了 <code>work</code> 方法，并在 <code>Female</code> 和 <code>Male</code> 都实现了不同的效果，然后我们知道人人都有 <code>work</code> 方法，因此可以像 <code>introduce_self</code> 一样，用循环批量调用 <code>work</code> 方法，这是 <strong>多态</strong> 带来的好处。</p><p>看到这里你应该有些理解：面向对象是将客观事物和一些关系，抽象成具体的模型（类），并为其设计属性和方法，即 <strong>对象 = 属性（特征）+ 方法（行为）</strong>。</p><p>如果是拥有复杂关系的需求，我们就应该尽可能将互相有关联的行为抽象成类，比如每一个网页，网页中每一个组件 等等。实际上面向对象帮助我们在几万行代码的大型项目中，仍然可以游刃有余，正因为如此，才能发展为目前应用最为广泛的编程思想。</p><p>但也并不是说任何时候都要“面向对象”，过度的封装和抽象，也会造成代码可读性的下降，以及运行效率的下降，因此我们应该<strong>在能将事物抽象化的需求中使用面向对象</strong>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PyCon China 2019</title>
    <link href="undefined2019/10/16/first/"/>
    <url>2019/10/16/first/</url>
    
    <content type="html"><![CDATA[<h4 id="转载至PyCon-China"><a href="#转载至PyCon-China" class="headerlink" title="转载至PyCon China"></a>转载至<em>PyCon China</em></h4><p>9 月 21 号周六，参加了 PyCon China 2019 上海站，这是每年一届的 Python 中国开发者大会。</p><p><img src="http://static.zkqiang.cn/images/20190922124621.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>今年的上海站比往年的阵容扩大很多，「流畅的 Python」作者、Flask 作者及核心维护者、PyCharm 开发者等等大佬都登台演讲。</p><p>本文将总结一下我观看的演讲，但并不会深入和完整，如有感兴趣的主题，可以等待官方后续放出的视频，我的公众号到时候也会转载。</p><h2 id="Python-的永恒之美"><a href="#Python-的永恒之美" class="headerlink" title="Python 的永恒之美"></a>Python 的永恒之美</h2><p><img src="http://static.zkqiang.cn/images/20190922124620.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>「流畅的 Python」作者 Luciano Ramalho，作为首场演讲的嘉宾，他的讲题围绕着 Python 之禅（PEP 20: The Zen of Python），结合了国际象棋、围棋、甚至易经，再次诠释 Python 语法的优美之处。</p><p>他还表示 Python 非常适合女性开发，介绍了 Python 开发团队拥有很多女性加入，顺带调侃了 Python 作者 Guido 在演讲中只回答女性的提问。</p><h2 id="通过-Azure-实现图片分类"><a href="#通过-Azure-实现图片分类" class="headerlink" title="通过 Azure 实现图片分类"></a>通过 Azure 实现图片分类</h2><p><img src="http://static.zkqiang.cn/images/20190922131825.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>第二场是由微软开发者 Dave Glover，介绍如何使用 Python 与微软 Azure 的免费云服务，构建一套 IoT 图片分类系统，并演示了开发一个水果分类功能，将不同水果的图片进行简单训练后，就可以用于超市收银台快速计算不同水果的价格（不过现场似乎因为音画不同步，导致有些小意外…）。</p><p>另外下午场微软 VS Code 还现场发布了在 Python 领域的新功能，具体可见公众号次条推送。</p><h2 id="AWS-Serverless-一站式开发"><a href="#AWS-Serverless-一站式开发" class="headerlink" title="AWS Serverless 一站式开发"></a>AWS Serverless 一站式开发</h2><p><img src="http://static.zkqiang.cn/images/20190922141104.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>结束了前两场英语听力后（翻译在文末吐槽），第三场是来自宝岛台湾的谢洪恩，他是 AWS 无服务器与容器专家解决方案架构师。他介绍了 AWS 近几年在 Serverless 领域发布的新技术，主要包括：</p><ul><li>AWS Lambda</li><li>AWS SAR（Serverless Application Repository）</li><li>AWS CDK（Cloud Development Kit）</li></ul><p>利用这些技术让 Python 开发者在无服务器的情况下，完成一站式开发部署（也支持其它多种语言），并且还介绍了在微服务框架中的应用。</p><p>另外在下午场中，谢老师还进行了三个小时的 AWS WorkShop 专场，现场指导开发者们，在 AWS CDK 中从零开始完成一个完整项目。但可惜由于时间冲突，我没有选择参加。</p><h2 id="Flask-作者谈调试"><a href="#Flask-作者谈调试" class="headerlink" title="Flask 作者谈调试"></a>Flask 作者谈调试</h2><p><img src="http://static.zkqiang.cn/images/20190922141939.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>Flask、Werkzeug、Jinja2、Click 等开源项目的作者 Armin Ronacher，讲述他在 Python 调试方面的新看法，并通过最近使用 Rust 语言的开发经历，发现了 Python 在性能上较慢反而对调试有帮助。</p><p>遗憾的是他英语语速很快，PPT 文字内容也比较少，我并没有听懂太多细节，需要等待视频再复习一波。</p><h2 id="在调试上的新实现"><a href="#在调试上的新实现" class="headerlink" title="在调试上的新实现"></a>在调试上的新实现</h2><p><img src="http://static.zkqiang.cn/images/20190922142519.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>上午最后一场，是由 Google 软件工程师、《捕蛇者说》播客创始人 laike9m 演讲，同样是调试的话题，但他带来的是一个新思路，以及已经实现的开源库 —— <a href="https://github.com/laike9m/Cyberbrain" target="_blank" rel="noopener">Cyberbrain</a>。</p><p>主要思路是对目标变量进行追踪，通过可视化界面查看变量从初始化一直到目标行的过程，从而帮助快速定位 BUG。</p><p>以下是一段示例代码：</p><pre><code>def func_f(bar):    x = len(bar)    return xdef func_c(baa):    baa.append(None)    baa.append(&#39;?&#39;)def func_a(foo):    for i in range(2): pass    ba = [foo]    func_c(ba)    foo = func_f(ba)    cyberbrain.register(foo)import cyberbraincyberbrain.init()fo = 1func_a(fo)</code></pre><p>通过对 <code>foo</code> 变量的注册，可以产生以下输出：</p><p><img src="http://static.zkqiang.cn/images/20190922162303.jpeg-slim" srcset="/img/loading.gif" alt="img"></p><p>并且支持持久化存储，即使在服务器上也可以 DEBUG。</p><h2 id="AIOps-数据中台与-Python"><a href="#AIOps-数据中台与-Python" class="headerlink" title="AIOps 数据中台与 Python"></a>AIOps 数据中台与 Python</h2><p><img src="http://static.zkqiang.cn/images/20190922163054.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>下午场都是同时开始的分会场，所以我只能选择听自己感兴趣的场次。</p><p>最近两年“中台”概念比较火，我公司也已经有中台，所以我首场选择了这个中台话题的场次，嘉宾是来自阿里云日志服务的丁来强。</p><p>他演讲的内容主要是介绍目前市面上众多 AIOps 平台，并介绍如何通过开源的 AIOps 搭建数据中台，来解决数据收集、算法处理海量日志等以往需要大量人工的问题。</p><p>至于 Ops 的未来趋势，他表示：</p><blockquote><p>根据 Gartner 的报告，AIOps 将在未来 5-10 年落地开花，并集中统一各种 Ops 平台（Dev、IT、Net、Sec）。</p></blockquote><h2 id="Django-中运用-GraphQL"><a href="#Django-中运用-GraphQL" class="headerlink" title="Django 中运用 GraphQL"></a>Django 中运用 GraphQL</h2><p>先介绍一下 GraphQL，它是 Facebook 发布 API 查询语言，旨在提供 RestFul 架构体系的替代方案，但一直鲜有人用，甚至鲜有人知。</p><p>目前 RestFul API 存在的问题是，返回的数据结构和类型都是后端定义，前端需求变化，后端也要随之改变，如果是中大型项目，改动接口是会产生大量连带工作量。</p><p>而 GraphQL 就是解决这一痛点，它实现了前端可以自定义请求字段与结构，而后端则专心处理请求逻辑与数据库映射。具体不再多介绍，可查阅相关资料。</p><p><img src="http://static.zkqiang.cn/images/20190922172502.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>LeetCode 后端架构师李齐雨，介绍了 LeetCode 在最近两年，已经将十几万行 Django 代码构成的所有接口，更换为了 GraphQL。</p><p>更换后的好处则如上面所介绍，让接口迭代更加灵活。他主要分享的是期间遇到的一些问题，以及如何攻克，比如数据转换、查询性能优化等。</p><p>不过他也直言，如果对接口性能要求很高，建议暂时不要使用 GraphQL。</p><h2 id="构建自动化测试集群"><a href="#构建自动化测试集群" class="headerlink" title="构建自动化测试集群"></a>构建自动化测试集群</h2><p><img src="http://static.zkqiang.cn/images/20190922180928.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>这一场是网易 Airtest 团队负责人杨柳，前半部分是介绍 Airtest 这一开源的自动化测试框架，在跨平台特别是 App、手游这方面的优势，框架集成的图像识别、控件识别大幅增加了自动化能力。</p><p>后半部分是分享网易游戏如何将自动化测试逐步扩展为大规模测试集群，并且介绍了如何使用 3x4 小型机柜，实现一个企业级、私有化的测试解决方案。</p><h2 id="通过-Python-构建-RPC"><a href="#通过-Python-构建-RPC" class="headerlink" title="通过 Python 构建 RPC"></a>通过 Python 构建 RPC</h2><p><img src="http://static.zkqiang.cn/images/20190922183157.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>来自饿了么的资深工程师张汝家，先是介绍了 thrift 这一款 RPC 协议，在目前微服务架构中的应用，以及目前 Python 实现的 thriftpy 和 thriftpy2 的区别和各自的应用场景。</p><p>然后他分享了使用 thriftpy 构建一套 RPC 协议架构的过程，中间不同分层该如何设计，并且其中一些通信与传输问题是如何解决的。</p><h2 id="闪电演讲"><a href="#闪电演讲" class="headerlink" title="闪电演讲"></a>闪电演讲</h2><p>最后的场次，是本届 PyCon 设置的新环节，每位嘉宾只有 5 分钟时间演讲，可惜部分嘉宾超时未完成演讲，实际效果欠佳。</p><p>不过有一个印象深刻的主题是将 C/C++ 代码转换为 .pyd 文件，Python 可直接调用。</p><p><img src="http://static.zkqiang.cn/images/20190922184628.jpg-slim" srcset="/img/loading.gif" alt="img"></p><p>演讲者是上海韦纳科技的韦泽华，他实现了此功能并开源名为 <a href="https://github.com/nanoric/c2py" target="_blank" rel="noopener">c2py</a>，该项目与之前类似功能的 Swig 相比，c2py 更加易用，不需要像 Swig 写接口文件，just run c2py &amp; build。</p><h2 id="本次大会的观后感"><a href="#本次大会的观后感" class="headerlink" title="本次大会的观后感"></a>本次大会的观后感</h2><p>相较于往期有非常大的进步，主要是：</p><ul><li>本届大咖云集，通过多位著名项目核心开发者的分享，学习他们在各自领域中独到的见解；</li><li>分会场的设立，充分扩大了演讲的主题范围，也满足了不同方向的开发者不同的关注点。</li></ul><p>但依然有部分遗憾之处，比如：</p><ul><li>第一场半程，某赞助商的 AI 翻译就莫名罢工，并且一上午都没有再启动，导致我等英语苦手，对三位国外大佬的演讲吸收量大减；</li><li>WorkShop 设置在下午分会场，如果选择了就相当于无缘同时间段的三场演讲，纠结之下我只能放弃参与。</li></ul><p>总体本届还是收获满满，票价超值了，也看出主办方想办好 PyCon China 的决心，希望明年再加油，PyCon 明年见！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/10/16/hello-world/"/>
    <url>2019/10/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>